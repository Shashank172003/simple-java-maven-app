name: Build and Deploy Maven App

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build the project (no tests)
        run: mvn clean package -DskipTests --no-transfer-progress

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-files
          path: target/*.jar

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Run tests
        run: mvn test --no-transfer-progress

      - name: Archive test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports/

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t myapp:latest .

      - name: Save Docker image as tar
        run: docker save myapp:latest -o myapp.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: myapp.tar

  docker-tag:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load -i myapp.tar

      - name: Tag Docker image
        run: docker tag myapp:latest your-dockerhub-username/myapp:latest

  docker-push:
    runs-on: ubuntu-latest
    needs: docker-tag

    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load -i myapp.tar

      - name: Push Docker image
        run: docker push your-dockerhub-username/myapp:latest
